#version 450

struct ProjectionConst {
	// Martix A
	uint mCenterIndex;
	uint mRightIndex;
	uint mLeftIndex;
	uint mUpIndex;
	uint mDownIndex;

	float mCenterCoefficient;
	float mRightCoefficient;
	float mLeftCoefficient;
	float mUpCoefficient;
	float mDownCoefficient;


	// Source term B
	float mSourceB;
};
struct ProjectionVector {
	float mPositionX;
	float mDirectionP;
	float mResidualR;
};
struct ProjectionUniform {
	float mRkRk;
	float mPkAPk;
	// mDistanceAlpha = RkRk/PkAPk
	float mDistanceAlpha;
	// mDirectionBelta = R(k+1)R(k+1)/RkRk
	float mDirectionBelta;

	// 0. Init() change mRkRk
	// 1. PkaPk() change mPkAPk & mDistanceAlpha
	// 4. Rk+1Rk+1() change mDirectionBelta then RkRk = R(k+1)R(k+1) 
};

layout(binding = 0) readonly buffer ProjectionConstSSBOIn {
   ProjectionConst CellArrayIn[ ];
}ProjectionConstIn;
layout(binding = 1) buffer ProjectionVectorSSBO {
   ProjectionVector CellArray[ ];
}ProjectionVectorArray;
layout(binding = 2) uniform ProjectionUniformOut {
  ProjectionUniform ufo;
} UfoOut;

layout (local_size_x = 64, local_size_y = 1, local_size_z = 1) in;


void main() {
	uint globalid = uint(gl_GlobalInvocationID.x); 
    uint globalSize=uint(gl_WorkGroupSize.x);
    uint workgroupid=uint(gl_WorkGroupID.x);
    uint localId=uint(gl_LocalInvocationID.x);

	
	float B = ProjectionConstIn.CellArrayIn[globalid].mSourceB;

	uint CenterIndex = ProjectionConstIn.CellArrayIn[globalid].mCenterIndex;
	uint RightIndex = ProjectionConstIn.CellArrayIn[globalid].mRightIndex;
	uint LeftIndex = ProjectionConstIn.CellArrayIn[globalid].mLeftIndex;
	uint UpIndex = ProjectionConstIn.CellArrayIn[globalid].mUpIndex;
	uint DownIndex = ProjectionConstIn.CellArrayIn[globalid].mDownIndex;

	float CenterA = ProjectionConstIn.CellArrayIn[globalid].mCenterCoefficient;
	float RightA = ProjectionConstIn.CellArrayIn[globalid].mRightCoefficient;
	float LeftA = ProjectionConstIn.CellArrayIn[globalid].mLeftCoefficient;
	float UpA = ProjectionConstIn.CellArrayIn[globalid].mUpCoefficient;
	float DownA = ProjectionConstIn.CellArrayIn[globalid].mDownCoefficient;

	float CenterP = ProjectionVectorArray.CellArray[CenterIndex].mDirectionP;
	float RightP = ProjectionVectorArray.CellArray[RightIndex].mDirectionP;
	float LeftP = ProjectionVectorArray.CellArray[LeftIndex].mDirectionP;
	float UpP = ProjectionVectorArray.CellArray[UpIndex].mDirectionP;
	float DownP = ProjectionVectorArray.CellArray[DownIndex].mDirectionP;

	float result = ProjectionVectorArray.CellArray[globalid].mResidualR - UfoOut.ufo.mDistanceAlpha * ( CenterA * CenterP + RightA * RightP + LeftA * LeftP + UpA * UpP + DownA * DownP );
	ProjectionVectorArray.CellArray[globalid].mResidualR = result;
}