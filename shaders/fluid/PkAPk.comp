#version 450

struct ProjectionConst {
	// Martix A
	uint mCenterIndex;
	uint mRightIndex;
	uint mLeftIndex;
	uint mUpIndex;
	uint mDownIndex;

	float mCenterCoefficient;
	float mRightCoefficient;
	float mLeftCoefficient;
	float mUpCoefficient;
	float mDownCoefficient;


	// Source term B
	float mSourceB;
};
struct ProjectionVector {
	float mPositionX;
	float mDirectionP;
	float mResidualR;
};
struct ProjectionUniform {
	float mRkRk;
	float mPkAPk;
	// mDistanceAlpha = RkRk/PkAPk
	float mDistanceAlpha;
	// mDirectionBelta = R(k+1)R(k+1)/RkRk
	float mDirectionBelta;

	// 0. Init() change mRkRk
	// 1. PkaPk() change mPkAPk & mDistanceAlpha
	// 4. Rk+1Rk+1() change mDirectionBelta then RkRk = R(k+1)R(k+1) 

	
	float mRkBiggest;
};

struct SumData {
	float sum;
	float biggest;
};

shared float localArray[1024];


layout(std430, binding = 0) readonly buffer ProjectionConstSSBOIn {
   ProjectionConst CellArrayIn[ ];
}ProjectionConstIn;
layout(std430, binding = 1) buffer ProjectionVectorSSBOIn {
   ProjectionVector CellArrayIn[ ];
}ProjectionVectorIn;
layout(std430, binding = 2) buffer ResultSSBOOut {
   SumData CellArrayOut[ ];
}ResultOut;

layout (local_size_x = 1024, local_size_y = 1, local_size_z = 1) in;

void main() {
	uint globalid = uint(gl_GlobalInvocationID.x); 
    uint globalSize=uint(gl_WorkGroupSize.x);
    uint workgroupid=uint(gl_WorkGroupID.x);
    uint localId=uint(gl_LocalInvocationID.x);

	uint CenterIndex = ProjectionConstIn.CellArrayIn[globalid].mCenterIndex;
	uint RightIndex = ProjectionConstIn.CellArrayIn[globalid].mRightIndex;
	uint LeftIndex = ProjectionConstIn.CellArrayIn[globalid].mLeftIndex;
	uint UpIndex = ProjectionConstIn.CellArrayIn[globalid].mUpIndex;
	uint DownIndex = ProjectionConstIn.CellArrayIn[globalid].mDownIndex;

	float CenterA = ProjectionConstIn.CellArrayIn[globalid].mCenterCoefficient;
	float RightA = ProjectionConstIn.CellArrayIn[globalid].mRightCoefficient;
	float LeftA = ProjectionConstIn.CellArrayIn[globalid].mLeftCoefficient;
	float UpA = ProjectionConstIn.CellArrayIn[globalid].mUpCoefficient;
	float DownA = ProjectionConstIn.CellArrayIn[globalid].mDownCoefficient;
	
	float CenterP = ProjectionVectorIn.CellArrayIn[CenterIndex].mDirectionP;
	float RightP = ProjectionVectorIn.CellArrayIn[RightIndex].mDirectionP;
	float LeftP = ProjectionVectorIn.CellArrayIn[LeftIndex].mDirectionP;
	float UpP = ProjectionVectorIn.CellArrayIn[UpIndex].mDirectionP;
	float DownP = ProjectionVectorIn.CellArrayIn[DownIndex].mDirectionP;

	
	float result = ( CenterA * CenterP + RightA * RightP + LeftA * LeftP + UpA * UpP + DownA * DownP ) * CenterP;

   
    localArray[localId] = result;

    for (uint stride = 1024 / 2; stride > 0; stride /= 2)
     {
      // Waiting for each 2x2 addition into given workgroup
      barrier();

      // Add elements 2 by 2 between local_id and local_id + stride
      if (localId < stride)
        localArray[localId] = localArray[localId] + localArray[localId + stride];
     }

     if (localId == 0){
		ResultOut.CellArrayOut[workgroupid].sum = localArray[0];
	 }
}