#version 450

struct SmokeGridCell2D {
	float mVelocityU;
	float mVelocityV;

	float mPressure;
	float mDensity;
	float mConcentration;
	float mTemperature;

	uint mCellType;
	uint mIndexCloest;
};
struct FluidUniform {
	uint mMaxX;
	uint mMaxY;

	float mDeltaTime;
	float mDeltaX;

	float mDensityAir;
	float mDensitySoot;
	float mAlpha;

	float mTemperatureAmbient;
	float mBelta;
};

struct ProjectionConst {
	// Martix A
	uint mCenterIndex;
	uint mRightIndex;
	uint mLeftIndex;
	uint mUpIndex;
	uint mDownIndex;

	float mCenterCoefficient;
	float mRightCoefficient;
	float mLeftCoefficient;
	float mUpCoefficient;
	float mDownCoefficient;


	// Source term B
	float mSourceB;
};
struct ProjectionVector {
	float mPositionX;
	float mDirectionP;
	float mResidualR;
};

layout(std430, binding = 0) readonly buffer OriginSSBOConst {
   SmokeGridCell2D CellArray[ ];
}OriginConstArray;
layout(std430, binding = 1) readonly buffer BuoyancyFinishSSBO {
   SmokeGridCell2D CellArray[ ];
}BuoyancyFinishArray;
layout(std430, binding = 2) readonly buffer ProjectionConstSSBOIn {
   ProjectionConst CellArray[ ];
}ProjectionConstArray;
layout(std430, binding = 3) readonly buffer ProjectionVectorSSBOIn {
   ProjectionVector CellArray[ ];
}ProjectionVectorArray;
layout(std430, binding = 4) buffer ResultSSBOOut {
   SmokeGridCell2D CellArray[ ];
}SmokeGridCell2DOutArray;
layout(binding = 5) uniform FluidUfo {
  FluidUniform ufo;
}Ufo;
layout(binding = 6) buffer DrawSSboOut {
   vec4 CellArray[ ];
}Draw;
layout(std430, binding = 7) readonly buffer InputFinishSSBO {
   SmokeGridCell2D CellArray[ ];
}InputFinishArray;

layout (local_size_x = 64, local_size_y = 1, local_size_z = 1) in;


void main() {
	uint globalid = uint(gl_GlobalInvocationID.x); 
    uint globalSize=uint(gl_WorkGroupSize.x);
    uint workgroupid=uint(gl_WorkGroupID.x);
    uint localId=uint(gl_LocalInvocationID.x);

	
	uint LeftIndex = ProjectionConstArray.CellArray[globalid].mLeftIndex;
	uint DownIndex = ProjectionConstArray.CellArray[globalid].mDownIndex;

	float CenterPressure = ProjectionVectorArray.CellArray[globalid].mPositionX;

	float LeftPressure;
	float DownPressure;

	
	LeftPressure = ProjectionVectorArray.CellArray[LeftIndex].mPositionX;
	DownPressure = ProjectionVectorArray.CellArray[DownIndex].mPositionX;

	/*
	if(LeftIndex != globalid){
		LeftPressure = ProjectionVectorArray.CellArray[LeftIndex].mPositionX;
	}
	else{
		LeftPressure = 0;
	}
	
	if(DownIndex != globalid){
		DownPressure = ProjectionVectorArray.CellArray[DownIndex].mPositionX;
	}
	else{
		DownPressure = 0;
	}*/

	
//	float Density = 1;
	float Density = BuoyancyFinishArray.CellArray[globalid].mDensity;

	float DeltaTime = Ufo.ufo.mDeltaTime;

	float resultVelocityU;
	float resultVelocityV;
	float resultPressure;
	float resultDensity;
	float resultConcentration;
	float resultTemperature;

	
	resultVelocityU = BuoyancyFinishArray.CellArray[globalid].mVelocityU - DeltaTime * (CenterPressure - LeftPressure)/Density;
	resultVelocityV = BuoyancyFinishArray.CellArray[globalid].mVelocityV - DeltaTime * (CenterPressure - DownPressure)/Density;
		
	resultPressure = CenterPressure;
	resultDensity = Density;
	resultConcentration = BuoyancyFinishArray.CellArray[globalid].mConcentration;
	resultTemperature = BuoyancyFinishArray.CellArray[globalid].mTemperature;


	if(InputFinishArray.CellArray[globalid].mCellType == 2){
		resultVelocityU = InputFinishArray.CellArray[globalid].mVelocityU;
		resultVelocityV = InputFinishArray.CellArray[globalid].mVelocityV;

		resultPressure = InputFinishArray.CellArray[globalid].mPressure;
		resultDensity = InputFinishArray.CellArray[globalid].mDensity;
		resultConcentration = InputFinishArray.CellArray[globalid].mConcentration;
		resultTemperature = InputFinishArray.CellArray[globalid].mTemperature;
	}

	if(BuoyancyFinishArray.CellArray[globalid].mCellType == 1){
		resultVelocityU = OriginConstArray.CellArray[globalid].mVelocityU;
		resultVelocityV = OriginConstArray.CellArray[globalid].mVelocityV;

		resultPressure = OriginConstArray.CellArray[globalid].mPressure;
		resultDensity = OriginConstArray.CellArray[globalid].mDensity;
		resultConcentration = OriginConstArray.CellArray[globalid].mConcentration;
		resultTemperature = OriginConstArray.CellArray[globalid].mTemperature;
	}





	SmokeGridCell2DOutArray.CellArray[globalid].mVelocityU = resultVelocityU;
	SmokeGridCell2DOutArray.CellArray[globalid].mVelocityV = resultVelocityV;

	SmokeGridCell2DOutArray.CellArray[globalid].mPressure = resultPressure;
	SmokeGridCell2DOutArray.CellArray[globalid].mDensity = resultDensity;
	SmokeGridCell2DOutArray.CellArray[globalid].mConcentration = resultConcentration;
	SmokeGridCell2DOutArray.CellArray[globalid].mTemperature = resultTemperature;

	Draw.CellArray[globalid * 6].z = resultConcentration;
	Draw.CellArray[globalid * 6 + 1].z = resultConcentration;
	Draw.CellArray[globalid * 6 + 2].z = resultConcentration;
	Draw.CellArray[globalid * 6 + 3].z = resultConcentration;
	Draw.CellArray[globalid * 6 + 4].z = resultConcentration;
	Draw.CellArray[globalid * 6 + 5].z = resultConcentration;
}