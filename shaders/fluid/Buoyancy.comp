#version 450

struct SmokeGridCell2D {
	float mVelocityU;
	float mVelocityV;

	float mPressure;
	float mDensity;
	float mConcentration;
	float mTemperature;

	uint mCellType;
	uint mIndexCloest;
};
struct FluidUniform {
	uint mMaxX;
	uint mMaxY;

	float mDeltaTime;
	float mDeltaX;

	float mDensityAir;
	float mDensitySoot;
	float mAlpha;

	float mTemperatureAmbient;
	float mBelta;
};

float Kt = 0.005;
float ForceY = -0.001;

// Because 2d gird is stored in 1d array, so we need fiction that tansfer between XY of 2d grid and Index of 1d array
// IndexToXY tansfer from Index of 1d array to XY of 2d grid
// XYtoIndex tansfer from XY of 2d grid to Index of 1d array
uvec2 IndexToXY(const uint fMaxX, const uint fIndex){
	uint y = uint( floor( fIndex / fMaxX) );
	uint x= fIndex - y * fMaxX;

    uvec2 rtn;
    rtn.x=x;
    rtn.y=y;

    return rtn;
}
uint XYtoIndex(const uint fMaxX, const uvec2 fXY){
	uint rtn = fXY.x + fXY.y * fMaxX;
    return rtn;
}


// XY index of 2d grid may be out of range (smaller than 0 or X bigger than MaxX -1 or Y bigger than MaxY -1)
// Fiction is created to force XY index be in range
uvec2 IndexLimited(ivec2 fIndex, const uint fMaxX, const uint fMaxY){
	uvec2 rtn;
	rtn.x=min(max(fIndex.x,0), int(fMaxX - 1));
	rtn.y=min(max(fIndex.y,0), int(fMaxY - 1));
	return rtn;
}


layout(binding = 0) readonly buffer Vec3ArraySSBOIn {
   SmokeGridCell2D CellArrayIn[ ];
}vin;
layout(binding = 1) buffer Vec3ArraySSBOOut {
   SmokeGridCell2D CellArrayOut[ ];
}vout;
layout(binding = 2) uniform FluidUfo {
  FluidUniform ufo;
}Ufo;

layout (local_size_x = 64, local_size_y = 1, local_size_z = 1) in;

void main() {
	uint globalid = uint(gl_GlobalInvocationID.x); 
	uvec2 PositionGrid = IndexToXY(Ufo.ufo.mMaxX, globalid);

	ivec2 Left;
	Left.x = int(PositionGrid.x) - 1;
	Left.y = int(PositionGrid.y);
	ivec2 Right;
	Right.x = int(PositionGrid.x) + 1;
	Right.y = int(PositionGrid.y);
	ivec2 Down;
	Down.x = int(PositionGrid.x);
	Down.y = int(PositionGrid.y) - 1;
	ivec2 Up;
	Up.x = int(PositionGrid.x);
	Up.y = int(PositionGrid.y) + 1;

	uvec2 LeftLimited = IndexLimited(Left, Ufo.ufo.mMaxX, Ufo.ufo.mMaxY);
	uvec2 RightLimited = IndexLimited(Right, Ufo.ufo.mMaxX, Ufo.ufo.mMaxY);
	uvec2 DownLimited = IndexLimited(Down, Ufo.ufo.mMaxX, Ufo.ufo.mMaxY);
	uvec2 UpLimited = IndexLimited(Up, Ufo.ufo.mMaxX, Ufo.ufo.mMaxY);

	uint IndexLeft = XYtoIndex(Ufo.ufo.mMaxX, LeftLimited);
	uint RightLeft = XYtoIndex(Ufo.ufo.mMaxX, RightLimited);
	uint DownLeft = XYtoIndex(Ufo.ufo.mMaxX, DownLimited);
	uint UpLeft = XYtoIndex(Ufo.ufo.mMaxX, UpLimited);
    
	float FinalTemperature = vin.CellArrayIn[globalid].mTemperature+
	(vin.CellArrayIn[IndexLeft].mTemperature + vin.CellArrayIn[RightLeft].mTemperature + 
	vin.CellArrayIn[DownLeft].mTemperature +vin.CellArrayIn[UpLeft].mTemperature
	- vin.CellArrayIn[globalid].mTemperature * 4
	) * Ufo.ufo.mDeltaTime * Kt;

	float FinalConcentration = vin.CellArrayIn[globalid].mConcentration+
	(vin.CellArrayIn[IndexLeft].mConcentration + vin.CellArrayIn[RightLeft].mConcentration + 
	vin.CellArrayIn[DownLeft].mConcentration +vin.CellArrayIn[UpLeft].mConcentration
	- vin.CellArrayIn[globalid].mConcentration * 4
	) * Ufo.ufo.mDeltaTime * Kt;

	float DeltaVelocityV = ForceY * (Ufo.ufo.mAlpha * FinalConcentration - Ufo.ufo.mBelta * (FinalTemperature - Ufo.ufo.mTemperatureAmbient));

	
	float FinalDensity = (Ufo.ufo.mAlpha * FinalConcentration + 1 -  Ufo.ufo.mBelta * (FinalTemperature - Ufo.ufo.mTemperatureAmbient)) * Ufo.ufo.mDensityAir;

	if( FinalConcentration  < 0.001){
			vout.CellArrayOut[globalid].mVelocityU = 0;
			vout.CellArrayOut[globalid].mVelocityV = 0;
		}
		else{
			vout.CellArrayOut[globalid].mVelocityU = vin.CellArrayIn[globalid].mVelocityU;
			vout.CellArrayOut[globalid].mVelocityV = vin.CellArrayIn[globalid].mVelocityV + DeltaVelocityV;
		}



	
	vout.CellArrayOut[globalid].mPressure  = vin.CellArrayIn[globalid].mPressure;
	vout.CellArrayOut[globalid].mDensity  = FinalDensity;
	vout.CellArrayOut[globalid].mConcentration =  FinalConcentration;
	vout.CellArrayOut[globalid].mTemperature =  FinalTemperature;

	
	vout.CellArrayOut[globalid].mCellType  = vin.CellArrayIn[globalid].mCellType;
	vout.CellArrayOut[globalid].mIndexCloest  = vin.CellArrayIn[globalid].mIndexCloest;
}