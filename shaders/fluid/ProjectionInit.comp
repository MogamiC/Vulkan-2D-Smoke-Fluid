#version 450

struct SmokeGridCell2D {
	float mVelocityU;
	float mVelocityV;

	float mPressure;
	float mDensity;
	float mConcentration;
	float mTemperature;

	uint mCellType;
	uint mIndexCloest;
};
struct FluidUniform {
	uint mMaxX;
	uint mMaxY;

	float mDeltaTime;
	float mDeltaX;

	float mDensityAir;
	float mDensitySoot;
	float mAlpha;

	float mTemperatureAmbient;
	float mBelta;
};

struct ProjectionConst {
	// Martix A
	uint mCenterIndex;
	uint mRightIndex;
	uint mLeftIndex;
	uint mUpIndex;
	uint mDownIndex;

	float mCenterCoefficient;
	float mRightCoefficient;
	float mLeftCoefficient;
	float mUpCoefficient;
	float mDownCoefficient;


	// Source term B
	float mSourceB;
};
struct ProjectionVector {
	float mPositionX;
	float mDirectionP;
	float mResidualR;
};
struct ProjectionUniform {
	float mRkRk;
	float mPkAPk;
	// mDistanceAlpha = RkRk/PkAPk
	float mDistanceAlpha;
	// mDirectionBelta = R(k+1)R(k+1)/RkRk
	float mDirectionBelta;

	// 0. Init() change mRkRk
	// 1. PkaPk() change mPkAPk & mDistanceAlpha
	// 4. Rk+1Rk+1() change mDirectionBelta then RkRk = R(k+1)R(k+1) 
};

float GlobalPressure = 1;

// Because 2d gird is stored in 1d array, so we need fiction that tansfer between XY of 2d grid and Index of 1d array
// IndexToXY tansfer from Index of 1d array to XY of 2d grid
// XYtoIndex tansfer from XY of 2d grid to Index of 1d array
uvec2 IndexToXY(const uint fMaxX, const uint fIndex){
	uint y = uint( floor( fIndex / fMaxX) );
	uint x= fIndex - y * fMaxX;

    uvec2 rtn;
    rtn.x=x;
    rtn.y=y;

    return rtn;
}
uint XYtoIndex(const uint fMaxX, const uvec2 fXY){
	uint rtn = fXY.x + fXY.y * fMaxX;
    return rtn;
}


// XY index of 2d grid may be out of range (smaller than 0 or X bigger than MaxX -1 or Y bigger than MaxY -1)
// Fiction is created to force XY index be in range
uvec2 IndexLimited(ivec2 fIndex, const uint fMaxX, const uint fMaxY){
	uvec2 rtn;
	rtn.x=min(max(fIndex.x,0), uint(fMaxX - 1));
	rtn.y=min(max(fIndex.y,0), uint(fMaxY - 1));
	return rtn;
}


layout(binding = 0) readonly buffer GridCellSSBOIn {
   SmokeGridCell2D CellArrayIn[ ];
}GridCell;
layout(binding = 1) buffer ProjectionConstSSBOOut {
   ProjectionConst CellArrayOut[ ];
}ProjectionConstOut;
layout(binding = 2) buffer ProjectionVectorSSBOOut {
   ProjectionVector CellArrayOut[ ];
}ProjectionVectorOut;
layout(binding = 3) uniform FluidUfo {
  FluidUniform ufo;
}Ufo;

layout (local_size_x = 64, local_size_y = 1, local_size_z = 1) in;

void main() {
	uint globalid = uint(gl_GlobalInvocationID.x); 
	uvec2 PositionGrid = IndexToXY(Ufo.ufo.mMaxX, globalid);

	ivec2 Left; //вС
	Left.x = int(PositionGrid.x) - 1;
	Left.y = int(PositionGrid.y);
	ivec2 Right; //ср
	Right.x = int(PositionGrid.x) + 1;
	Right.y = int(PositionGrid.y);
	ivec2 Down; //об
	Down.x = int(PositionGrid.x);
	Down.y = int(PositionGrid.y) - 1;
	ivec2 Up; //ио
	Up.x = int(PositionGrid.x);
	Up.y = int(PositionGrid.y) + 1;

	uvec2 LeftLimited = IndexLimited(Left, Ufo.ufo.mMaxX, Ufo.ufo.mMaxY);
	uvec2 RightLimited = IndexLimited(Right, Ufo.ufo.mMaxX, Ufo.ufo.mMaxY);
	uvec2 DownLimited = IndexLimited(Down, Ufo.ufo.mMaxX, Ufo.ufo.mMaxY);
	uvec2 UpLimited = IndexLimited(Up, Ufo.ufo.mMaxX, Ufo.ufo.mMaxY);

	uint LeftIndex = XYtoIndex(Ufo.ufo.mMaxX, LeftLimited);
	uint RightIndex = XYtoIndex(Ufo.ufo.mMaxX, RightLimited);
	uint DownIndex = XYtoIndex(Ufo.ufo.mMaxX, DownLimited);
	uint UpIndex = XYtoIndex(Ufo.ufo.mMaxX, UpLimited);
    
	ProjectionConstOut.CellArrayOut[globalid].mCenterIndex = globalid;
	ProjectionConstOut.CellArrayOut[globalid].mLeftIndex = LeftIndex;
	ProjectionConstOut.CellArrayOut[globalid].mRightIndex = RightIndex;
	ProjectionConstOut.CellArrayOut[globalid].mDownIndex = DownIndex;
	ProjectionConstOut.CellArrayOut[globalid].mUpIndex = UpIndex;
	
	float sDeltaTime = Ufo.ufo.mDeltaTime ;

	float FinalCenterCoefficient = 0;
	
	float FinalLeftCoefficient = 0;
	float FinalRightCoefficient = 0;
	float FinalUpCoefficient = 0;
	float FinalDownCoefficient = 0;

	float FinalSourceB = 0;

	float CenterDensity = GridCell.CellArrayIn[globalid].mDensity;
	float LeftDensity = GridCell.CellArrayIn[LeftIndex].mDensity;
	float RightDensity = GridCell.CellArrayIn[RightIndex].mDensity;
	float DownDensity = GridCell.CellArrayIn[DownIndex].mDensity;
	float UpDensity = GridCell.CellArrayIn[UpIndex].mDensity;
	
	float VelocityLeft = GridCell.CellArrayIn[globalid].mVelocityU;
	float VelocityRight = GridCell.CellArrayIn[RightIndex].mVelocityU;
	float VelocityDown = GridCell.CellArrayIn[globalid].mVelocityV;
	float VelocityUp = GridCell.CellArrayIn[UpIndex].mVelocityV;

	
	//Left
	if(LeftIndex != globalid){
		if(GridCell.CellArrayIn[LeftIndex].mCellType == 1){
			// Cell is Soild
			// No change in FinalCenterCoefficient & FinalLeftCoefficient
			// Change VelocityLeft
			VelocityLeft = GridCell.CellArrayIn[LeftIndex].mVelocityU;
		}
		else{
			// Cell is Fluid
			// No change in VelocityLeft
			// Change FinalCenterCoefficient & FinalLeftCoefficient
			FinalCenterCoefficient = sDeltaTime * (1 / ((CenterDensity + LeftDensity) * 0.5)) + FinalCenterCoefficient;
			FinalLeftCoefficient = sDeltaTime * (-1 / ((CenterDensity + LeftDensity) * 0.5));
		}
	}
	else{
		// Cell not Exist
		// No change in  FinalCenterCoefficient & FinalRightCoefficient
		// Change VelocityLeft
		VelocityLeft = 0;
	}
	//Right
	if(RightIndex != globalid){
		if(GridCell.CellArrayIn[RightIndex].mCellType == 1){
			// Cell is Soild
			// No change in VelocityLeft & FinalCenterCoefficient & FinalLeftCoefficient
		}
		else{
			// Cell is Fluid
			// No change in VelocityLeft
			// Change FinalCenterCoefficient & FinalLeftCoefficient
			FinalCenterCoefficient = sDeltaTime * (1 / ((CenterDensity + RightDensity) * 0.5)) + FinalCenterCoefficient;
			FinalRightCoefficient = sDeltaTime * (-1 / ((CenterDensity + RightDensity) * 0.5));
		}
	}
	else{
		// Cell not Exist
		// No change in  FinalCenterCoefficient & FinalRightCoefficient
		// Change VelocityLeft
		VelocityRight = 0;
	}




	//Down
	if(DownIndex != globalid){
		if(GridCell.CellArrayIn[DownIndex].mCellType == 1){
			// Cell is Soild
			// No change in FinalCenterCoefficient & FinalDownCoefficient
			// Change VelocityDown
			VelocityDown = GridCell.CellArrayIn[DownIndex].mVelocityV;
		}
		else{
			// Cell is Fluid
			// No change in VelocityDown
			// Change FinalCenterCoefficient & FinalDownCoefficient
			FinalCenterCoefficient = sDeltaTime * (1 / ((CenterDensity + DownDensity) * 0.5)) + FinalCenterCoefficient;
			FinalDownCoefficient = sDeltaTime * (-1 / ((CenterDensity + DownDensity) * 0.5));
		}
	}
	else{
		// Cell not Exist
		// No change in  FinalCenterCoefficient & FinalRightCoefficient
		// Change VelocityUp
		VelocityDown = 0;
	}

	//Up
	if(UpIndex != globalid){
		if(GridCell.CellArrayIn[UpIndex].mCellType == 1){
			// Cell is Soild
			// No change in VelocityUp & FinalCenterCoefficient & FinalUpCoefficient
		}
		else{
			// Cell is Fluid
			// No change in VelocityUp
			// Change FinalCenterCoefficient & FinalUpCoefficient
			FinalCenterCoefficient = sDeltaTime * (1 / ((CenterDensity + UpDensity) * 0.5)) + FinalCenterCoefficient;
			FinalUpCoefficient = sDeltaTime * (-1 / ((CenterDensity + UpDensity) * 0.5));
		}
	}
	else{
		// Cell not Exist
		// No change in  FinalCenterCoefficient & FinalRightCoefficient
		// Change VelocityUp
		VelocityUp = 0;
	}



	FinalSourceB = -1 * ( VelocityRight - VelocityLeft + VelocityUp - VelocityDown) / FinalCenterCoefficient;

	ProjectionConstOut.CellArrayOut[globalid].mCenterCoefficient = 1;
	ProjectionConstOut.CellArrayOut[globalid].mLeftCoefficient = FinalLeftCoefficient / FinalCenterCoefficient;
	ProjectionConstOut.CellArrayOut[globalid].mRightCoefficient = FinalRightCoefficient / FinalCenterCoefficient;
	ProjectionConstOut.CellArrayOut[globalid].mUpCoefficient = FinalUpCoefficient / FinalCenterCoefficient;
	ProjectionConstOut.CellArrayOut[globalid].mDownCoefficient = FinalDownCoefficient / FinalCenterCoefficient;
	ProjectionConstOut.CellArrayOut[globalid].mSourceB = FinalSourceB;
	
	ProjectionVectorOut.CellArrayOut[globalid].mResidualR = FinalSourceB;
	ProjectionVectorOut.CellArrayOut[globalid].mDirectionP = FinalSourceB;
	ProjectionVectorOut.CellArrayOut[globalid].mPositionX = 0;

	if(GridCell.CellArrayIn[globalid].mCellType == 1){
		ProjectionConstOut.CellArrayOut[globalid].mCenterCoefficient = 0;
		ProjectionConstOut.CellArrayOut[globalid].mRightCoefficient = 0;
		ProjectionConstOut.CellArrayOut[globalid].mLeftCoefficient = 0;
		ProjectionConstOut.CellArrayOut[globalid].mUpCoefficient = 0;
		ProjectionConstOut.CellArrayOut[globalid].mDownCoefficient = 0;
		
		ProjectionConstOut.CellArrayOut[globalid].mSourceB = 0;

		ProjectionVectorOut.CellArrayOut[globalid].mResidualR = 0;
		ProjectionVectorOut.CellArrayOut[globalid].mDirectionP = 0;
		ProjectionVectorOut.CellArrayOut[globalid].mPositionX = 0;
	}

	/*
	if( globalid == 1 ){
		ProjectionConstOut.CellArrayOut[globalid].mRightCoefficient = 0;
		ProjectionConstOut.CellArrayOut[globalid].mLeftCoefficient = 0;
		ProjectionConstOut.CellArrayOut[globalid].mUpCoefficient = 0;
		ProjectionConstOut.CellArrayOut[globalid].mDownCoefficient = 0;
		
		
		FinalSourceB = -sDeltaTime * GlobalPressure / Ufo.ufo.mDensityAir/ FinalCenterCoefficient;

		ProjectionConstOut.CellArrayOut[globalid].mSourceB = FinalSourceB;

		ProjectionVectorOut.CellArrayOut[globalid].mResidualR = FinalSourceB;
		ProjectionVectorOut.CellArrayOut[globalid].mDirectionP = FinalSourceB;
		ProjectionVectorOut.CellArrayOut[globalid].mPositionX = 0;
	}*/
}