#version 450


struct ProjectionVector {
	float mPositionX;
	float mDirectionP;
	float mResidualR;
};
struct ProjectionUniform {
	float mRkRk;
	float mPkAPk;
	// mDistanceAlpha = RkRk/PkAPk
	float mDistanceAlpha;
	// mDirectionBelta = R(k+1)R(k+1)/RkRk
	float mDirectionBelta;

	// 0. Init() change mRkRk
	// 1. PkaPk() change mPkAPk & mDistanceAlpha
	// 4. Rk+1Rk+1() change mDirectionBelta then RkRk = R(k+1)R(k+1) 

	
	float mRkBiggest;
};

layout(binding = 0) buffer ProjectionVectorSSBO {
   ProjectionVector CellArray[ ];
}ProjectionVectorArray;
layout(binding = 1) uniform ProjectionUniformOut {
  ProjectionUniform ufo;
} UfoOut;


layout (local_size_x = 64, local_size_y = 1, local_size_z = 1) in;


void main() {
	uint globalid = uint(gl_GlobalInvocationID.x); 
    uint globalSize=uint(gl_WorkGroupSize.x);
    uint workgroupid=uint(gl_WorkGroupID.x);
    uint localId=uint(gl_LocalInvocationID.x);

	ProjectionVectorArray.CellArray[globalid].mPositionX = ProjectionVectorArray.CellArray[globalid].mDirectionP * UfoOut.ufo.mDistanceAlpha + ProjectionVectorArray.CellArray[globalid].mPositionX ;
}